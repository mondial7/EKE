@mixin border-radius($radius) {
  -webkit-border-radius: $radius;
     -moz-border-radius: $radius;
      -ms-border-radius: $radius;
          border-radius: $radius;
}

@mixin box-shadow($shadow) {
  -webkit-box-shadow: $shadow;
          box-shadow: $shadow;
}

@mixin transition($ttime){
  -webkit-transition: all $ttime ease-in-out;
      transition: all $ttime ease-in-out;
}

@mixin transform($type, $value){
  -webkit-transform: unquote($type+unquote('(#{$value})'));
          transform: unquote($type+unquote('(#{$value})'));
}

@mixin box-sizing($box-size) {
	-webkit-box-sizing: $box-size;
       -moz-box-sizing: $box-size;
            box-sizing: $box-size;
}

@mixin scale($x){
  transform: scale($x);
  -webkit-transform: scale($x);
}

@mixin filter($filter-type,$filter-amount) { 
  -webkit-filter: unquote($filter-type+unquote('(#{$filter-amount})'));
  -moz-filter: unquote($filter-type+unquote('(#{$filter-amount})'));
  -ms-filter: unquote($filter-type+unquote('(#{$filter-amount})'));
  -o-filter: unquote($filter-type+unquote('(#{$filter-amount})'));
  filter: unquote($filter-type+unquote('(#{$filter-amount})'));
}

@mixin bright($filter-amount) { 
  -webkit-filter: brightness+unquote('(#{$filter-amount})');
  -moz-filter: brightness+unquote('(#{$filter-amount})');
  -ms-filter: brightness+unquote('(#{$filter-amount})');
  -o-filter: brightness+unquote('(#{$filter-amount})');
  filter: brightness+unquote('(#{$filter-amount})');
}

@mixin grayscale($filter-amount) { 
  -webkit-filter: grayscale+unquote('(#{$filter-amount})');
  filter: grayscale+unquote('(#{$filter-amount})');
}


/* Animation mixin */

@mixin rotate(){
  from {transform: rotate(0deg)}
  to {transform: rotate(360deg)}
}
